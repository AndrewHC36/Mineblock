use crate::ui::*;
use crate::renderer::UIVtx;

use winit::event::Event;
use std::collections::HashMap;

// TODO: might use a rasterizer, or a mix of manual and rasterizer (esp. Chinese characters, arabic)

// TODO: Temporary
const CHR_MAP_W: u8 = 5;
const CHR_MAP_H: u8 = 7;

fn manual_txt_en_font() -> HashMap<char, [[u8; 5];7]> {
    let mut map = HashMap::new();
    map.insert(
        'A',
        [
            [0,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,1,1,1,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
        ]
    );
    map.insert(
        'B',
        [
            [1,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,1,1,1,0],
        ]
    );
    map.insert(
        'C',
        [
            [0,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,0,0,0,1],
            [0,1,1,1,0],
        ]
    );
    map.insert(
        'D',
        [
            [1,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,1,1,1,0],
        ]
    );
    map.insert(
        'E',
        [
            [1,1,1,1,1],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,1,1,1,0],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,1,1,1,1],
        ]
    );
    map.insert(
        'F',
        [
            [1,1,1,1,1],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,1,1,1,0],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,0,0,0,0],
        ]
    );
    map.insert(
        'G',
        [
            [0,1,1,1,1],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,0,1,1,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [0,1,1,1,0],
        ]
    );
    map.insert(
        'H',
        [
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,1,1,1,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
        ]
    );
    map.insert(
        'I',
        [
            [1,1,1,1,1],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [1,1,1,1,1],
        ]
    );
    map.insert(
        'J',
        [
            [1,1,1,1,1],
            [0,0,0,1,0],
            [0,0,0,1,0],
            [0,0,0,1,0],
            [0,0,0,1,0],
            [1,0,0,1,0],
            [0,1,1,0,0],
        ]
    );
    map.insert(
        'K',
        [
            [1,0,0,0,1],
            [1,0,0,1,0],
            [1,1,1,0,0],
            [1,0,0,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
        ]
    );
    map.insert(
        'L',
        [
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,1,1,1,1],
        ]
    );
    map.insert(
        'M',
        [
            [1,0,0,0,1],
            [1,1,0,1,1],
            [1,1,1,1,1],
            [1,0,1,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
        ]
    );
    map.insert(
        'N',
        [
            [1,0,0,0,1],
            [1,1,0,0,1],
            [1,0,1,0,1],
            [1,0,1,0,1],
            [1,0,0,1,1],
            [1,0,0,1,1],
            [1,0,0,0,1],
        ]
    );
    map.insert(
        'O',
        [
            [0,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [0,1,1,1,0],
        ]
    );
    map.insert(
        'P',
        [
            [1,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,1,1,1,0],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [1,0,0,0,0],
        ]
    );
    map.insert(
        'Q',
        [
            [0,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,1,0],
            [0,1,1,0,1],
        ]
    );
    map.insert(
        'R',
        [
            [1,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
        ]
    );
    map.insert(
        'S',
        [
            [0,1,1,1,1],
            [1,0,0,0,0],
            [1,0,0,0,0],
            [0,1,1,1,0],
            [0,0,0,0,1],
            [0,0,0,0,1],
            [1,1,1,1,0],
        ]
    );
    map.insert(
        'T',
        [
            [1,1,1,1,1],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
        ]
    );
    map.insert(
        'U',
        [
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [0,1,1,1,0],
        ]
    );
    map.insert(
        'V',
        [
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [0,1,0,1,0],
            [0,1,0,1,0],
            [0,0,1,0,0],
        ]
    );
    map.insert(
        'W',
        [
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [1,0,1,0,1],
            [1,1,0,1,1],
            [1,0,0,0,1],
            [1,0,0,0,1],
        ]
    );
    map.insert(
        'X',
        [
            [1,0,0,0,1],
            [1,0,0,0,1],
            [0,1,0,1,0],
            [0,0,1,0,0],
            [0,1,0,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
        ]
    );
    map.insert(
        'Y',
        [
            [1,0,0,0,1],
            [1,0,0,0,1],
            [0,1,0,1,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
        ]
    );
    map.insert(
        'Z',
        [
            [1,1,1,1,1],
            [0,0,0,0,1],
            [0,0,0,1,0],
            [0,0,1,0,0],
            [0,1,0,0,0],
            [1,0,0,0,0],
            [1,1,1,1,1],
        ]
    );
    map.insert(
        '1',
        [
            [0,0,1,0,0],
            [1,1,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [1,1,1,1,1],
        ]
    );
    map.insert(
        '2',
        [
            [0,1,1,1,0],
            [1,0,0,0,1],
            [0,0,0,0,1],
            [0,0,0,1,0],
            [0,0,1,0,0],
            [0,1,0,0,0],
            [1,1,1,1,1],
        ]
    );
    map.insert(
        '3',
        [
            [0,1,1,1,0],
            [1,0,0,0,1],
            [0,0,0,0,1],
            [0,0,1,1,0],
            [0,0,0,0,1],
            [1,0,0,0,1],
            [0,1,1,1,0],
        ]
    );
    map.insert(
        '4',
        [
            [0,0,0,1,1],
            [0,0,1,0,1],
            [0,1,0,0,1],
            [1,0,0,0,1],
            [1,1,1,1,1],
            [0,0,0,0,1],
            [0,0,0,0,1],
        ]
    );
    map.insert(
        '5',
        [
            [1,1,1,1,1],
            [1,0,0,0,0],
            [1,1,1,1,0],
            [0,0,0,0,1],
            [0,0,0,0,1],
            [1,0,0,0,1],
            [0,1,1,1,0],
        ]
    );
    map.insert(
        '6',
        [
            [0,0,1,1,0],
            [0,1,0,0,0],
            [1,0,0,0,0],
            [1,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [0,1,1,1,0],
        ]
    );
    map.insert(
        '7',
        [
            [1,1,1,1,1],
            [1,0,0,0,1],
            [0,0,0,0,1],
            [0,0,0,1,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
            [0,0,1,0,0],
        ]
    );
    map.insert(
        '8',
        [
            [0,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [0,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [0,1,1,1,0],
        ]
    );
    map.insert(
        '9',
        [
            [0,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,0,1],
            [0,1,1,1,1],
            [0,0,0,0,1],
            [0,0,0,1,0],
            [0,1,1,0,0],
        ]
    );
    map.insert(
        '0',
        [
            [0,1,1,1,0],
            [1,0,0,0,1],
            [1,0,0,1,1],
            [1,0,1,0,1],
            [1,1,0,0,1],
            [1,0,0,0,1],
            [0,1,1,1,0],
        ]
    );
    map.insert(
        ' ',
        [
            [0,0,0,0,0],
            [0,0,0,0,0],
            [0,0,0,0,0],
            [0,0,0,0,0],
            [0,0,0,0,0],
            [0,0,0,0,0],
            [0,0,0,0,0],
        ]
    );
    map
}

#[derive(Clone)]
pub struct Text {
    pub text: String,
    pub pos: [f32; 2],  // starting position
    pub size: f32,
    pub pad_x: f32,  // x-pad between each characters

    // TODO: temporary
    txt_en_font_dval: HashMap<char, [[u8; 5];7]>
}

impl Text {
    pub fn new(txt: String, pos: [f32; 2], size: f32) -> Self {
        Self {
            text: txt,
            pos,
            size,
            pad_x: 0.01,
            txt_en_font_dval: manual_txt_en_font(),
        }
    }
}

impl Widget for Text {
    fn update(&mut self, e: &Event<()>) {
        // its static
    }

    fn render(&self, ctx: &mut UICanvas) {
        for (ind_chr, c) in self.text.chars().into_iter().enumerate() {
            let cmap = if let Some(chr) = self.txt_en_font_dval.get(&c) {
                chr
            } else {
                println!("Character not supported: {}", c);
                &[
                    [1,1,1,1,1],
                    [1,1,1,1,1],
                    [1,0,1,0,1],
                    [1,1,0,1,1],
                    [1,0,1,0,1],
                    [1,1,1,1,1],
                    [1,1,1,1,1],
                ]
            };
            for (indr, row) in cmap.iter().enumerate() {
                for (indc, chr) in row.iter().enumerate() {
                    if chr == &1 {
                        &ctx.add_square([
                                            self.pos[0]+(indc as f32*self.size)+((CHR_MAP_W as f32*self.size+self.pad_x)*ind_chr as f32),
                                            self.pos[1]+(indr as f32*self.size)
                                        ],
                                        self.size,
                                        [indr as f32/6.0, 1.0, 1.0, 1.0]);
                    }
                }
            }
        }
    }
}

// impl Into<&dyn Widget> for Text {
//     fn into(self) -> &dyn Widget {
//         unimplemented!()
//     }
//}
